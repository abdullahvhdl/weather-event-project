package com.test.weatherproject.schedule;

import com.jayway.jsonpath.DocumentContext;
import com.jayway.jsonpath.JsonPath;
import com.test.weatherproject.domain.Event;
import com.test.weatherproject.service.EventService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.data.web.JsonPath;
import org.springframework.http.*;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import java.net.URISyntaxException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

@Component
public class EventScheduler {

    private static final Logger log = LoggerFactory.getLogger(EventScheduler.class);

    // private static final SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");

    private EventService eventService;

    @Autowired
    public EventScheduler(EventService eventService) {
        this.eventService = eventService;
    }

    //@Scheduled(fixedRate = 2000)
    public void persistWeatherInformation() throws URISyntaxException {

        String json = getExternalWeatherData();
        Event event = convertJsonDataIntoEventObject(json);

        eventService.add(event);
        log.info(event.toString());
    }

    private Event convertJsonDataIntoEventObject(String json) {
        DocumentContext jsonContext = JsonPath.parse(json);
        Event event = new Event();

        try {
            Double latitude = jsonContext.read("$['coord']['lat']");
            event.setLatitude(latitude);
        } catch (ClassCastException e) {
            Integer latitudeInt = jsonContext.read("$['coord']['lat']");
            event.setLatitude((double)latitudeInt);
        }

        try {
            Double longitude = jsonContext.read("$['coord']['lon']");
            event.setLongitude(longitude);
        } catch (ClassCastException e) {
            Integer longitudeInt = jsonContext.read("$['coord']['lon']");
            event.setLongitude((double)longitudeInt);
        }

        Integer timeStamp = jsonContext.read("$['dt']");
        event.setDate(new Date(timeStamp * 1000L));
        event.setLocation(jsonContext.read("$['name']"));
        event.setAlert(jsonContext.read("$['weather'][0]['description']"));
        return event;
    }

    private String getExternalWeatherData() {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        RestTemplate restTemplate = new RestTemplate();
        String apiKey = "88939d83390aa6b5998cf0ada758a1bb";

        int[] cityCodes = {};

        int idCityIndex = ThreadLocalRandom.current().nextInt(0, 999);

        String url = "http://api.openweathermap.org/data/2.5/weather?id="+cityCodes[idCityIndex]+"&APPID="+apiKey;

        HttpEntity<String> requestEntity = new HttpEntity<>(headers);
        ResponseEntity<String> stringResponseEntity = restTemplate.exchange(url, HttpMethod.GET, requestEntity, String.class);
        return stringResponseEntity.getBody();
    }
}
